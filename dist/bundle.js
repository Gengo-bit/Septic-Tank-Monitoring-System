/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("// Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCgrcyyM547ICJc6fzbunqWSV64pKlRfZA\",\n  authDomain: \"septic-tank-capacity.firebaseapp.com\",\n  databaseURL: \"https://septic-tank-capacity-default-rtdb.asia-southeast1.firebasedatabase.app\",\n  projectId: \"septic-tank-capacity\",\n  storageBucket: \"septic-tank-capacity.appspot.com\",\n  messagingSenderId: \"445055846573\",\n  appId: \"1:445055846573:web:166f5bcc5e6b8d40e6de24\",\n  measurementId: \"G-M9K3YTLTRP\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\nconst auth = firebase.auth();\nconst database = firebase.database();\n\n// Tank dimensions and capacity\nlet tankDimensions = { height: 35, length: 45, width: 45 };\nlet septicTankCapacity = (tankDimensions.height * tankDimensions.length * tankDimensions.width) / 1000;\n\n// Charts\nlet capacityChart, historicalChart;\n\n// Prediction variables\nlet previousVolume = null;\nlet previousTimestamp = null;\n\n// Authentication check and app initialization\nauth.onAuthStateChanged((user) => {\n  if (user) {\n      // User is authenticated, proceed to initialize the app\n      initializeApp();\n  } else {\n      // Optionally redirect to login.html (if you want to protect this page too)\n      // window.location.href = 'login.html';\n  }\n});\n\n\nfunction initializeApp() {\n  // Fetch tank dimensions\n  database.ref('tankDimensions').once('value', (snapshot) => {\n    if (snapshot.exists()) {\n      tankDimensions = snapshot.val();\n      septicTankCapacity = (tankDimensions.height * tankDimensions.length * tankDimensions.width) / 1000;\n    }\n  });\n\n  // Initialize charts\n  initializeCharts();\n\n  // Real-time update listener\n  database.ref('septicTankData').limitToLast(10).on('child_added', (snapshot) => {\n    const data = snapshot.val();\n    const capacity = data.capacity;\n    const currentVolume = (capacity / 100) * septicTankCapacity;\n\n    updateCapacity(capacity);\n    updateHistoricalChart(capacity, data.date, new Date(data.timestamp * 1000).toLocaleTimeString());\n    calculatePrediction(currentVolume, data.timestamp);\n  });\n\n  // Event listener for saving tank dimensions\n  document.getElementById('save-settings').addEventListener('click', saveTankDimensions);\n}\n\nfunction initializeCharts() {\n  capacityChart = new Chart(document.getElementById('capacityChart').getContext('2d'), {\n    type: 'doughnut',\n    data: {\n      labels: ['Used', 'Available'],\n      datasets: [{\n        data: [0, 100],\n        backgroundColor: ['#FF5A5F', '#82CFFF'],\n        borderWidth: 1\n      }]\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        legend: {\n          labels: {\n            color: (context) => context.chart.canvas.style.backgroundColor === 'black' ? '#D1D1D1' : '#4A4A4A',\n            font: { family: 'Poppins', size: 14 }\n          }\n        }\n      }\n    }\n  });\n\n  historicalChart = new Chart(document.getElementById('historicalChart').getContext('2d'), {\n    type: 'line',\n    data: {\n      labels: [],\n      datasets: [{\n        label: 'Septic Tank Levels Over Time',\n        data: [],\n        borderColor: '#82CFFF',\n        fill: false\n      }]\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      scales: {\n        x: {\n          title: { display: true, text: 'Time and Date' },\n          ticks: { color: (context) => context.chart.canvas.style.backgroundColor === 'black' ? '#D1D1D1' : '#4A4A4A' }\n        },\n        y: {\n          title: { display: true, text: 'Septic Tank Capacity (%)' },\n          ticks: { color: (context) => context.chart.canvas.style.backgroundColor === 'black' ? '#D1D1D1' : '#4A4A4A' },\n          min: 0,\n          max: 100\n        }\n      }\n    }\n  });\n}\n\nfunction updateCapacity(capacity) {\n  capacityChart.data.datasets[0].data = [capacity, 100 - capacity];\n  capacityChart.update();\n\n  document.getElementById(\"capacity\").innerHTML = `<span class=\"capacity-text\">Capacity: ${capacity}%</span>`;\n\n  const statusElement = document.getElementById(\"status\");\n  let status, color;\n\n  if (capacity < 75) [status, color] = ['Normal', 'green'];\n  else if (capacity <= 85) [status, color] = ['Above Normal', 'yellow'];\n  else if (capacity <= 95) [status, color] = ['Critical', 'orange'];\n  else [status, color] = ['Full', 'red'];\n\n  statusElement.innerHTML = `<span class=\"status-text\">The Septic Tank is </span><span class=\"status\" style=\"color: ${color};\"><strong>${status}</strong></span>`;\n}\n\nfunction updateHistoricalChart(capacity, date, timestamp) {\n  historicalChart.data.labels.push(`${date} ${timestamp}`);\n  historicalChart.data.datasets[0].data.push(capacity);\n  historicalChart.update();\n}\n\nfunction calculatePrediction(currentVolume, currentTime) {\n  if (previousVolume !== null && previousTimestamp !== null) {\n    const flowRate = (currentVolume - previousVolume) / (currentTime - previousTimestamp);\n    const remainingVolume = septicTankCapacity - currentVolume;\n    const estimatedTimeToFull = remainingVolume / flowRate;\n\n    if (flowRate > 0) {\n      const hoursToFull = estimatedTimeToFull / 3600;\n      document.getElementById(\"prediction\").innerHTML = hoursToFull >= 1 ?\n        `<span class=\"time-until-full\">The Septic Tank will be full in <strong>${hoursToFull.toFixed(2)} hours</strong></span>` :\n        `<span class=\"time-until-full\">The Septic Tank will be full in <strong>${(hoursToFull * 60).toFixed(0)} minutes</strong></span>`;\n    } else {\n      document.getElementById(\"prediction\").innerHTML = `<span class=\"rate-too-low\">Flow rate is too low to estimate time.</span>`;\n    }\n  }\n\n  previousVolume = currentVolume;\n  previousTimestamp = currentTime;\n}\n\nfunction saveTankDimensions() {\n  const newDimensions = {\n    height: parseFloat(document.getElementById('input-tankHeight').value),\n    length: parseFloat(document.getElementById('input-tankLength').value),\n    width: parseFloat(document.getElementById('input-tankWidth').value)\n  };\n\n  database.ref('tankDimensions').set(newDimensions)\n    .then(() => {\n      tankDimensions = newDimensions;\n      septicTankCapacity = (tankDimensions.height * tankDimensions.length * tankDimensions.width) / 1000;\n      document.getElementById('settingsModal').style.display = 'none';\n    })\n    .catch((error) => console.error(\"Error saving dimensions: \", error));\n}\n\nfunction logout() {\n  auth.signOut()\n    .then(() => window.location.href = 'login.html')\n    .catch((error) => console.error(\"Logout Error:\", error));\n}\n\nfunction registerUser(email, password) {\n  auth.createUserWithEmailAndPassword(email, password)\n    .then((userCredential) => {\n      // Registration successfulzW\n      const user = userCredential.user;\n      console.log(\"User registered successfully:\", user);\n      // You can redirect to the main page or show a success message\n      window.location.href = 'index.html';\n    })\n    .catch((error) => {\n      // Handle errors here\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      console.error(\"Registration error:\", errorCode, errorMessage);\n      // Display error message to the user\n      document.getElementById('error-message').textContent = errorMessage;\n    });\n}\n\n\n// Make logout function available globally\nwindow.logout = logout;\nwindow.registerUser = registerUser;\n// Add styles\nconst styles = `\n  .capacity-text, .status-text, .time-until-full, .rate-too-low {\n    font-family: 'Poppins', sans-serif;\n    font-size: 18px;\n    color: var(--text-color);\n    font-weight: 300;\n  }\n  .status { font-size: 20px; }\n`;\n\nconst styleSheet = document.createElement(\"style\");\nstyleSheet.textContent = styles;\ndocument.head.appendChild(styleSheet);\n//This will ensure that after the user refreshes the page, they will be redirected to their last visited page, not index.html.\nfirebase.auth().onAuthStateChanged((user) => {\n  if (user) {\n      const lastPage = localStorage.getItem('lastPage') || 'home.html';\n      if (window.location.pathname !== lastPage) {\n          window.location.href = lastPage;\n      }\n  } else {\n      window.location.href = 'login.html';\n  }\n});\n\nwindow.addEventListener('beforeunload', () => {\n  localStorage.setItem('lastPage', window.location.pathname);\n});\n\n\n//# sourceURL=webpack://thesis-website/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;